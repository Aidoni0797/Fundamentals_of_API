Our first resource

Наш первый ресурс

Напомним, что ресурсы - это существитеьные в API-интерфейсах (клиенты и пицца). Это то, с чем мы хотим, чтобы мир мог
взаимодействовать через наш API.
Чтобы понять, как компания разрабатывает API, давайте попробуем это сделать в нашей пиццерии. Начнем с добавления
возможности заказать пиццу.

Чтобы клиент мог поговорить с нами о пицце, нам нужно сделать несколько вещей:
1. Решить, какие ресурсы должны быть доступны.
2. Назначить URL-адреса этим ресурсам.
3. Решить, какие действия клиенту следует разрешить выполнять с этими ресурсами.
4. Вяснить, какие фрагменты данных требуются для каждого действия и в каком формате они должны быть.

Выбор ресурсов может оказаться непростой первой задачей. Один из способов подойти к проблеме - пройти через то,
что включает в себя типичное взаимодействие. В нашей пиццерии наверняка есть меню. В этом меню - пицца. Когда клиент
хочет, чтобы мы приготовили для него одну из пицц, он размещает заказ. В этом контексте меню, пицца, покупатель и заказ
выглядят как хорошие кандидаты на ресурсы. Начнем с заказа.

Следующим шагом будет присвоение URL-адресов ресурсу. Есть много возможнойтей, но, к счатью, соглашения REST дают
некоторые рекомендации. В типичном REST API ресурсу будут назначены два шаблона URL. Первый - это множественное число от
имени ресурса, например /orders. Второй - это множественное число от имени ресурса плюс уникальный идентификатор для
указания одного ресурса, например /orders/<order_id>, где <order_id> - уникальный идентификатор для заказа. 
Эти два шаблона URL составляют первые конечные точки (endpoints), которые будет поддерживать наш API. Они называются
конечными точками просто потому, что они идут в конце URL-адреса, как в http://example.com/<endpoint_goes_here>.

Теперь, когда мы выбрали ресурс и присвоили ему URL-адреса, нам нужно решить, какие действия может выполнять клиент.
Следуя соглашениям REST, мы говорим, что конечная точка множественного числа (/orders) предназначена для перечисления 
существующих заказов и создания новых. Множественное число с уникальным идентификатором конечной точки (/orders/<order_id>)
предназначено для исвлечения, обновления или отммены определенного заказа. Клиент сообщает серверу, какое действие
следует выполнить, передавая в запросе соответствующую команду HTTP (GET, POST, PUT или DELETE).

В целом наш API теперь выглядит так:

GET - /orders - Перечислить существующие заказы
POST - /orders - Разместить новый заказ
GET - /orders/1 - Получить подробности по заказу №1
GET - /orders/2 - Получить подробности по заказу №2
PUT - /orders/1 - Обность заказ №1
DELETE - /orders/1 - Отменить заказ №

После того как действия для конечных точек нашего заказа продуманы, последний шаг - решить, какими данными 
необходимо обмениваться между клиентом и сервером. Заимствуя пример с пиццерией из главы 3, мы можем сказать,
что заказ требует корочки и начинки. Нам также необходимо выбрать формат данных, который клиент и сервер могут
использовать для передачи этой информации туда и обратно. И XML и JSON - хорошие кандидаты, но для удобства
чтения мы выберем JSON.

На этом этапе вы можем себя поздравить; мы разработали работающий API! Вот как может выглядеть взаимодействие между
клиентом и сервером с использованием этого API:
