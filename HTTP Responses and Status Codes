HTTP Responses and Status Codes

После того, как сервер получает запрос от клиента, он пытается выполнить запрос и отправить клиенту ответ.
HTTP-ответы имеют очень похожую на запросы структуру. Основное отличие состоит в том, что вместо метода 
и URL-адреса ответ включает код состояния. А в остальном заголовки и тело ответа имеют тот же формат, что
и запросы.

Коды состояний
Коды состояний - это трехзначные номера, каждый из кооторых подразумевает под собой уникальное значение
состояния, обработанного сервером запроса. Если в API они используются корректно, эти три цифры могут
сообщить очень много информации клиенту. Например, вы могли видеть эту страницу в период ваших
интернет-странствий:

Код состояния, связанный с этим ответом - 404, что означает "Не найдено". Всякий раз, когда клиент делает
запрос на ресурс, который не существует, сервер отчает кодом состояния 404, чтобы сообщить клиенту: 
это ресурс не существует, поэтому, пожалуйста, не запрашивайте его снова!

Код ответа (состояния) HTTP показывает, был ли успешно выполнен определённый HTTP запрос. Коды сгруппированы
в 5 классов:
1. Информационные 100-199
2. Успешные 200-299
3. Перенаправления 300-399
4. Клиентские ошибки 400-499
5. Сервеные ошибки 500-599

В протоколе HTTP есть множество других статусов, от 200 ("успешно! этот запрос был выполнен")
до 503 (наш веб-сайт/API в настоящее время не работает). Мы изучим некоторые из них по мере их
появления в следующих главах.

После того, как ответ доставлен клиенту. Цикл Запрос-ОТвет завершается, и этот раунд связи завершается.
ТЕперь клиент должен инициировать дальнейшее взаимодействие. Сервер не будет отправлять клиенту больше
данных, пока он не получит новый запрос.

Итоги урока

Целью урока было дать вам базовое понимание HTTP. Ключевой концепцией был Цикл Запрос-Ответ, который
мы разделил на следующие части:

- Запрос - состоит из URL-адреса (http://...), метода (GET, POST, PUT, DELETE), списка заголовков
(User-Agent...) и тела (данных).
- Ответ - состоит из кода состояния (200, 404...), списка заголовков и гибкость интеграции.
