Part 1: Authentication 

Как сервер узнает, что клиент является тем, кем он себя называет? В этом уроке мы исследуем два способа,
с помощью которых клиент может подтвердить свою личность серверу.

Личности в виртуальном мире

Вам, вероятно, уже много раз приходилось регистрировать учетную запись на каких-либо веб-сайтах.
В ходе этого процесса сайт запрашивает у вас некоторую личную информацию, в первую очередь имя
пользователя и пароль. Эти две части информации становятся вашими опознавательными знаками.
Мы называем их вашими полномочиями. При повторном посещении веб-сайта вы можете войти в него,
указав эти учетные данные.

Вход в систему с использованием имени пользователя и пароля - один из примеров технического известного
как аутентификация. Когда вы аутентифицируетесь на сервере, вы подтверждаете свою личность серверу,
сообщая ему информацию, которую знаете только вы (по крайней мере, мы надеемся, что это знаете
только вы). Как только сервер узнает, кто вы, он сможет вам доверять и предоставить личные данные
вашей учетной записи.

API-интерфейсы используют несколько методов для аутентификации клиента. Это так называемые
схемы аутентификации. Давайте теперь посмотрим на две из этих схем.

Обычная проверка подлинности

Приведенный выше пример входа в систему является самой простой формой аутентификации. Фактически,
его официальное название - Базовая аутентификация. (Базовая аутентификация для его друзей)
.

Обычная проверка подлинности.

Приведенный выше примен входа в систему является самой простой формой аутентификации. Фактически,
его официальное название - Базовая аутентификация (Базовая аутентификация для его друзей). Хотя
это имя и не получило никаких наград за творческие достижения, это схема является вполне приемлемым 
способом для сервера аутентифицировать клиента в API.

Для базовой аутентификации требуется только имя пользователя и пароль. Клиент берет эти учётные
данные, смешивает их вместе, чтобы сформировать единое значение, и передает его в запросе
в заголовке HTTP под названием "Авторизация" (Authorization).

Когда сервер получает запрос, он просматривает заголовок Авторизации и сравнивает его 
с сохраненными учетными данными. Если имя пользователя и пароль совпадают с одним из пользователей
в списке сервера, сервер выполняет запрос клиента от лица этого пользователя. Если совпадений
нет, сервер возвращает специальный код состояния (401), чтобы клиент знал, что аутентификация не
удалась и запрос отклонен.

Хотя базовая аутентификация является допустимой схемой аутентификации, то обстоятельство, что она
использует одно и то же имя пользователя и пароль как для доступа к API так и для управления 
учетной записью, вызывает опасения. Это все равно что отель бы передавал гостю ключи от всего здания,
а не от комнаты, а не от комнаты.

Точно так же с API могут быть случаи, когда клиент должен иметь другие разрешения, чем владелец учетной
записи. Возбмем, к примеру, владельца бизнеса, который нанимает подрядчика для написания программы,
использующей API от их имени. Передача подрядчику учетных данных подвергает владельца риску,
поскольку недобросоветсный подрядчик может изменить пароль, заблокировав владельцу бизнеса доступ
к его собственной учетной записи. Понятно, что неплохо было бы иметь альтернативу.
